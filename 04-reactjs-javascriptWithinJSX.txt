So far we've been writing regular html within javascript, known as JSX elements.
In this part we go further and write regular javascript within the html within the javascript.
This will change the way elements get rendered.

Example:
ReactDOM.render(
	<h1>2 + 3</h1>,
	document.getElementById('app')
)

What will get rendered in the browser?
Answer: 2 + 3

However, if we were to render the html content housed within curly braces, it would render as a regular javascript expression would.

Example:
ReactDOM.render(
	<h1>{2 + 3}</h1>,
	document.getElementById('app')
)

What will get rendered in the browser?
Answer: 5

Example 2:
ReactDOM.render(
	<h1>{ Math.PI.toFixed(3) }</h1>,
	document.getElementById('app')
)

What will get rendered in the browser?
Answer: 3.142

The curly braces themselves won't be translated as javascript, they are purely markers to signal when javascript starts and ends,
similar to how quotations marks signal the beginning and end of a text string.

Accessing Variables:

You can access variables from within a JSX element, even if those variables were declared on the outside.
The following will still work:

var string = "I am text";
ReactDOM.render(<h1>{string}</h1>, document.getElementById('app'));

Output = I am text;

Setting variables as attributes:

In JSX variables can also be used to set attributes on an html document.

Example:
var goose = /images/goose.png;
var sideLength = 200;
var gooseImg = <img 
							 src={goose} 
							 alt="goose" 
						   height={sideLength} 
						   width={sideLength} 
						   />;

ReactDOM.render(gooseImg, document.getElementById('app'));

Output = image of the goose variable source, with a width and height of 200px.






